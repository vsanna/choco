let thresholdForAdult = 20;


puts("")
puts("================")
puts("## demo for puts")
puts("================")
let users = [
    { "name": "user1", "age": 10 },
    { "name": "user2", "age": 15 },
    { "name": "user3", "age": 20 },
    { "name": "user4", "age": 21 },
    { "name": "user5", "age": 15 }
]
puts(users[0])

puts("")
puts("================")
puts("## demo for foreach")
puts("================")
let foreach = fn(arr, f) {
    let iter = fn(arr) {
        if (len(arr) > 0) {
            f(first(arr))
            iter(rest(arr))
        }
    }
    iter(arr)
}
foreach(users, fn(user) {puts(user)})

puts("")
puts("================")
puts("## demo for filter")
puts("================")
let filter = fn(arr, f) {
    let iter = fn(arr, accumlated) {
        if (len(arr) == 0) {
            return accumlated
        } else {
            if (f(first(arr))) {
                push(accumlated, first(arr))
            }

            let nextAccum = if(f(first(arr))){
                push(accumlated, first(arr))
            } else {
                accumlated
            }

            iter(rest(arr), nextAccum)
        }
    }
    iter(arr, [])
}
let filteredUsers = filter(users, fn(user){ user["age"] >= thresholdForAdult })
foreach(filteredUsers, fn(user) { puts(user) })


puts("")
puts("================")
puts("## demo for map")
puts("================")
let map = fn(arr, f) {
    let iter = fn(arr, accumlated) {
        if (len(arr) == 0) {
            return accumlated
        } else {
            iter(rest(arr), push(accumlated, f(first(arr))))
        }
    }

    iter(arr, [])
}
let extractNames = map(users, fn(user) { user["name"] })
foreach(extractNames, fn(name) {puts(name)})
let withSymbol = map(extractNames, fn(userName) { userName + " is name." } )
foreach(withSymbol, fn(name) {puts(name)})


puts("")
puts("================")
puts("## demo for reduce")
puts("================")
let reduce = fn(arr, initial, f) {
    let iter = fn(arr, result) {
        if (len(arr) == 0) {
            return result
        } else {
            iter(rest(arr), f(result, first(arr)))
        }
    }

    iter(arr, initial)
}

let sumOfAge = reduce(users, 0, fn(accum, user) { accum + user["age"] })

puts(sumOfAge)